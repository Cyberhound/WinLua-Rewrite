--==== WinLua - Api ====--

encrypt_gui([imgui_form | winapi_form] : lightuserdata)
	returns encrypted_gui_data : string

save_gui([encrypted_gui_data : string | imgui_form | winapi_form] : lightuserdata)
	returns status : number (0 = success, 1 = failure)

ImGui.new([class_name : string]) [if class_name is nil it defaults to "WinApi_Form"]
	returns: imgui_form : table (you can index properties and set them)
	
WinApi.new([class_name : string]) [if class_name is nil it defaults to "WinApi_Form"]
	returns winapi_form : table (you can index properties and set them)

--------------------------------------------------

imgui_form : table {
	internal : bool (default: false) [if true, process needs to be set as the executables name]
	process : string (default: nil) [only needs to be set if internal is true)
	
	title : string (default: nil)
	controls : table {
		add(control : lightuserdata)
			returns nil
		
		remove(control : lightuserdata)
			returns nil
		
		retrieve([max_amount : number])
			returns controls : table (if max_amount is set, it will contain max_amount or less)
	}
	position : table { [set these before its ran and it will start at this position]
		x : number (default: 0)
		y : number (default: 0)
	}
	size : table {
		width : number (default: auto)
		height : number (default: auto)
	}
}

winapi_form : table {
	internal : bool (default: false) [if true, process needs to be set as the executables name]
	process : string (default: nil) [only needs to be set if internal is true)
	
	title : string (default: nil)
	controls : table {
		add(control : lightuserdata)
			returns nil
		
		remove(control : lightuserdata)
			returns nil
		
		retrieve([max_amount : number])
			returns controls : table (if max_amount is set, it will contain max_amount or less)
	}
	position : table { [set these before its ran and it will start at this position]
		x : number (default: 0)
		y : number (default: 0)
	}
	size : table {
		width : number (required)
		height : number (required)
	}
}

control : table {
	connect(event_name : string, event : function)
		returns event : table {
			disconnect()
				returns nil
			}
	
	text : string
	
	position : table { [set these before its ran and it will start at this position]
		x : number (default: 0)
		y : number (default: 0)
	}
	size : table {
		width : number (required)
		height : number (required)
	}
}
